{"ast":null,"code":"import React, { useState } from 'react';\n/**\r\n * psot video  \r\n * get video\r\n * post / get status, pause, playing, position\r\n */\n\nconst roomurl = 'https://gruppe13.toni-barth.com/rooms/'; //  takes the url and sends it to the api, uses session userid and uses getVideo()  \n// get video url, fetch video \n\nexport const postVideo = url => {\n  fetch(roomurl + sessionStorage.getItem('roomname') + '/video', {\n    method: 'PUT',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"user\": sessionStorage.getItem('id'),\n      \"url\": url\n    })\n  }).then(response => {\n    getVideo();\n  });\n}; // saves the roomurl (in the api) to a sessionkey and returns it\n\nexport const getVideo = () => {\n  // get video url, fetch video url\n  fetch(roomurl + sessionStorage.getItem('roomname') + '/video').then(response => {\n    return response.json();\n  }).then(data => {\n    sessionStorage.setItem(\"url\", data.url);\n  });\n  return sessionStorage.getItem('url');\n}; //saves room position from api of the api video to the session \n\nexport const getVideoPos = () => {\n  // get video url, fetch video url\n  fetch(roomurl + sessionStorage.getItem('roomname') + '/position').then(response => {\n    return response.json();\n  }).then(data => {\n    sessionStorage.setItem(\"position\", data.position);\n  });\n  return sessionStorage.getItem('position');\n}; // takes session positon and posts it to the api\n\nexport const postVideoPos = pos => {\n  //posts room position of video\n  // get video url, fetch video url\n  fetch(roomurl + sessionStorage.getItem('roomname') + '/position', {\n    method: 'PUT',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"user\": sessionStorage.getItem('id'),\n      \"position\": pos\n    })\n  });\n};\nexport const postVideoStat = stat => {\n  //posts room position of video\n  // get video url, fetch video url\n  fetch(roomurl + sessionStorage.getItem('roomname') + '/status', {\n    method: 'PUT',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"user\": sessionStorage.getItem('id'),\n      \"status\": stat\n    })\n  });\n};\nexport const getVideoStat = () => {\n  // get video url, fetch video url\n  fetch(roomurl + sessionStorage.getItem('roomname') + '/status').then(response => {\n    return response.json();\n  }).then(data => {\n    sessionStorage.setItem(\"stat\", data.status);\n  });\n  return sessionStorage.getItem('stat');\n};","map":{"version":3,"names":["React","useState","roomurl","postVideo","url","fetch","sessionStorage","getItem","method","headers","body","JSON","stringify","then","response","getVideo","json","data","setItem","getVideoPos","position","postVideoPos","pos","postVideoStat","stat","getVideoStat","status"],"sources":["D:/wum/w2g2022-web/src/components/Controller/VideoController.js"],"sourcesContent":["import React, { useState } from 'react'\r\n/**\r\n * psot video  \r\n * get video\r\n * post / get status, pause, playing, position\r\n */\r\nconst roomurl = 'https://gruppe13.toni-barth.com/rooms/'\r\n  //  takes the url and sends it to the api, uses session userid and uses getVideo()  \r\n        // get video url, fetch video \r\n    export const postVideo = (url) => {\r\n        fetch(roomurl+sessionStorage.getItem('roomname') +'/video',{\r\n            method:'PUT',\r\n            headers:{\"Content-Type\": \"application/json\"}, \r\n            body:  JSON.stringify({\"user\": sessionStorage.getItem('id'),\"url\": url}),})\r\n            .then( (response) => { getVideo()} )\r\n    }\r\n \r\n    // saves the roomurl (in the api) to a sessionkey and returns it\r\n    export const getVideo = () => {\r\n        // get video url, fetch video url\r\n        fetch(roomurl + sessionStorage.getItem('roomname') + '/video')\r\n        .then(response => {return response.json()}).then(data => { sessionStorage.setItem(\"url\", data.url)})\r\n        return sessionStorage.getItem('url')\r\n    }\r\n    //saves room position from api of the api video to the session \r\n    export const getVideoPos = () => {          \r\n        // get video url, fetch video url\r\n        fetch(roomurl + sessionStorage.getItem('roomname') + '/position')\r\n        .then(response => {return response.json()}).then(data => { sessionStorage.setItem(\"position\", data.position)})\r\n        return sessionStorage.getItem('position')\r\n    }\r\n    // takes session positon and posts it to the api\r\n    export const postVideoPos = (pos) => {  //posts room position of video\r\n        // get video url, fetch video url\r\n        fetch(roomurl + sessionStorage.getItem('roomname') + '/position', {\r\n            method: 'PUT',\r\n            headers:{\"Content-Type\": \"application/json\"}, \r\n            body:  JSON.stringify({\"user\": sessionStorage.getItem('id'),\"position\": pos}),})\r\n    }\r\n\r\n    export const postVideoStat = (stat) => {  //posts room position of video\r\n        // get video url, fetch video url\r\n        fetch(roomurl + sessionStorage.getItem('roomname') + '/status', {\r\n            method: 'PUT',\r\n            headers:{\"Content-Type\": \"application/json\"}, \r\n            body:  JSON.stringify({\"user\": sessionStorage.getItem('id'),\"status\": stat}),\r\n        })\r\n    }\r\n\r\n    export const getVideoStat = () => {          \r\n        // get video url, fetch video url\r\n        fetch(roomurl + sessionStorage.getItem('roomname') + '/status')\r\n        .then(response => {return response.json()}).then(data => { sessionStorage.setItem(\"stat\", data.status)})\r\n\r\n        return sessionStorage.getItem('stat')\r\n    }\r\n    \r\n\r\n    \r\n\t\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}