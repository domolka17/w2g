{"ast":null,"code":"var _jsxFileName = \"D:\\\\wum\\\\w2g2022-web\\\\src\\\\components\\\\Chat.js\",\n    _s = $RefreshSig$();\n\n/**\r\n *  Chat window\r\n *  TODO manages Chat\r\n *  TODO uses get and posts\r\n *  TODO exports it selfe, needs css style\r\n *  TODO writing message and submit it\r\n * \r\n */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { chatGet, chatPost } from './Controller/ChatController';\nimport \"./css/Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = () => {\n  _s();\n\n  const [message, setMessage] = useState('');\n  const [chatData, getChatData] = useState([]);\n  const [userData, getUserData] = useState([]);\n  const [messageList, getListData] = [{\n    autor: 'dummy',\n    text: 'dummytext',\n    time: 'dummy'\n  }, {\n    autor: 'dummy',\n    text: 'dummytext',\n    time: 'dummy'\n  }];\n  useEffect(() => {\n    const interval = setInterval(() => {\n      handleChat();\n      console.log('Update Chat');\n      const test = me;\n      console.log(messageList.length);\n    }, 3000);\n    return () => clearInterval(interval);\n  }, []); // submit message button\n\n  const handleButton = () => {\n    chatPost(message, sessionStorage.getItem('roomname')); // after posting message, emptys message-input\n\n    setTimeout(function () {\n      setMessage('');\n    }, 500);\n  };\n\n  const handleChat = () => {\n    fetchChatData(sessionStorage.getItem('roomname'));\n    fetchUserData(sessionStorage.getItem('roomname'));\n    convertChat();\n    console.log(messageList);\n  };\n\n  const convertChat = () => {\n    const length = chatData.length;\n    const check = false;\n    chatData.forEach(item => {\n      // first find username\n      const user = userData.find(user => {\n        return user.id = item.userId;\n      }); //check user name\n\n      if (user == null || user == undefined) {\n        user = 'deletetUser';\n      } //chek messageList length\n\n\n      if (messageList.length = undefined) {} //case 1 messageList length = 0, chek if spot is taken by empty and if it is fill it\n\n\n      if (messageList.length == 1) {\n        if (messageList[0] == 'undefined') {\n          messageList[0] = {\n            autor: user,\n            text: item.text,\n            time: item.time\n          };\n        } else {\n          check = true;\n        }\n\n        console.log('case 1');\n      } //case 2 if length is greater zhan 0 or 0 is not empty fill the next space\n\n\n      if (messageList.length > 1 || check == true) {\n        check = false;\n        messageList[messageList.length] = {\n          autor: user,\n          text: item.text,\n          time: item.time\n        };\n        console.log('case 2');\n      }\n    });\n  }; //____________________________\n\n\n  const fetchChatData = roomname => {\n    fetch('https://gruppe13.toni-barth.com/rooms/' + roomname + '/chat', {\n      method: 'GET'\n    }).then(res => res.json()).then(response => {\n      getChatData(response.messages);\n    });\n  };\n\n  const fetchUserData = roomname => {\n    fetch('https://gruppe13.toni-barth.com/rooms/' + roomname + '/users').then(res => res.json()).then(response => {\n      getUserData(response.users);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ChatBox\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messageBox\",\n      children: chatData.map(line => /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"massage\",\n        children: line.userId + ': ' + line.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 27\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatSubmitbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        class: \"submit\",\n        placeholder: \"Narricht schreiben\",\n        value: message,\n        onChange: change => setMessage(change.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: event => handleButton(),\n        className: \"message_submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"ALalVbmorXsUU3NKlWAbgHejo7E=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useRef","useState","chatGet","chatPost","Chat","message","setMessage","chatData","getChatData","userData","getUserData","messageList","getListData","autor","text","time","interval","setInterval","handleChat","console","log","test","me","length","clearInterval","handleButton","sessionStorage","getItem","setTimeout","fetchChatData","fetchUserData","convertChat","check","forEach","item","user","find","id","userId","undefined","roomname","fetch","method","then","res","json","response","messages","users","map","line","change","target","value","event"],"sources":["D:/wum/w2g2022-web/src/components/Chat.js"],"sourcesContent":["/**\r\n *  Chat window\r\n *  TODO manages Chat\r\n *  TODO uses get and posts\r\n *  TODO exports it selfe, needs css style\r\n *  TODO writing message and submit it\r\n * \r\n */\r\n\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { chatGet, chatPost } from './Controller/ChatController'\r\nimport \"./css/Chat.css\";\r\n\r\n\r\nconst Chat = () => {\r\n    const [message, setMessage] = useState('')\r\n    const [chatData, getChatData]= useState([])\r\n    const [userData, getUserData] = useState([])\r\n    const [messageList, getListData]=([{autor: 'dummy', text:'dummytext', time: 'dummy'}, {autor: 'dummy', text:'dummytext', time: 'dummy'}])\r\n\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            handleChat()\r\n            console.log('Update Chat')\r\n            const test = me\r\n            console.log(messageList.length)\r\n\t\t}, 3000);\r\n\t\treturn () => clearInterval(interval);\r\n\t}, []);\r\n\r\n    // submit message button\r\n    const handleButton = ()=>{\r\n        chatPost(message, sessionStorage.getItem('roomname'))\r\n        // after posting message, emptys message-input\r\n        setTimeout(function () {\r\n            setMessage('')\r\n        }, 500)\r\n    }\r\n\r\n\r\n\r\n    const handleChat=()=>{\r\n        fetchChatData(sessionStorage.getItem('roomname'))\r\n        fetchUserData(sessionStorage.getItem('roomname'))\r\n        convertChat()\r\n        console.log(messageList)\r\n    }\r\n    const convertChat=()=>{\r\n        \r\n        const length = chatData.length\r\n        const check = false\r\n\r\n        chatData.forEach((item)=>{\r\n            // first find username\r\n            const user = userData.find((user)=>{\r\n                return user.id = item.userId\r\n            })\r\n            //check user name\r\n            if(user==null||user==undefined){\r\n                user= 'deletetUser'\r\n            }\r\n            //chek messageList length\r\n            if (messageList.length= undefined){\r\n\r\n            }\r\n            //case 1 messageList length = 0, chek if spot is taken by empty and if it is fill it\r\n            if(messageList.length==1)\r\n            {\r\n                if(messageList[0]== 'undefined'){\r\n                    messageList[0]= {autor: user, text:item.text, time: item.time}\r\n                }\r\n                else{\r\n                    check=true\r\n                }\r\n                console.log('case 1')\r\n            }\r\n            //case 2 if length is greater zhan 0 or 0 is not empty fill the next space\r\n            if(messageList.length>1||check==true){\r\n                check=false\r\n                messageList[messageList.length]= {autor: user, text:item.text, time: item.time}\r\n                console.log('case 2')\r\n            }\r\n        })\r\n    }\r\n\r\n    //____________________________\r\n\r\n    const fetchChatData = (roomname) => {\r\n        \r\n        fetch('https://gruppe13.toni-barth.com/rooms/'+roomname+'/chat', {\r\n            method:'GET'\r\n        }).then((res) =>\r\n        res.json()).then((response)=> {\r\n            getChatData(response.messages)\r\n        })\r\n        \r\n    }\r\n\r\n    const fetchUserData = (roomname) => {\r\n\t\tfetch('https://gruppe13.toni-barth.com/rooms/' + roomname + '/users')\r\n\t\t\t.then((res) =>\r\n\t\t\t\tres.json())\r\n\t\t\t.then((response) => {\r\n\t\t\t\tgetUserData(response.users)\r\n\t\t\t})\r\n\r\n\t}\r\n    \r\n  return (\r\n    <div className='ChatBox'>\r\n        <div className='messageBox'>\r\n\t\t\t{chatData.map( line => <ul className='massage'>{line.userId+': '+line.text}</ul>)}\r\n        </div>\r\n        <div className='ChatSubmitbar'>\r\n            <input type=\"text\"  class=\"submit\" placeholder=\"Narricht schreiben\" value={message} onChange={(change) => setMessage(change.target.value)}></input>\r\n            <button onClick={event => handleButton()} className=\"message_submit\">Send</button>\r\n        </div>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default Chat"],"mappings":"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"},"metadata":{},"sourceType":"module"}