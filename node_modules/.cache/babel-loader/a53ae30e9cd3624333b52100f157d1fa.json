{"ast":null,"code":"var _jsxFileName = \"D:\\\\wum\\\\w2g2022-web\\\\src\\\\components\\\\Chat.js\",\n    _s = $RefreshSig$();\n\n/**\r\n *  Chat window\r\n *  TODO manages Chat\r\n *  TODO uses get and posts\r\n *  TODO exports it selfe, needs css style\r\n *  TODO writing message and submit it\r\n * \r\n */\nimport React, { useEffect, useState } from 'react';\nimport { chatPost } from './Controller/ChatController';\nimport \"./css/Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = () => {\n  _s();\n\n  const [messageList, getListData] = useState([]);\n  const [message, setMessage] = useState('');\n  const [chatData, getChatData] = useState([]);\n  const [userData, getUserData] = useState([]);\n  const roomname = sessionStorage.getItem('roomname');\n  var listData = [];\n  useEffect(() => {\n    const interval = setInterval(() => {\n      fetchChatData(roomname);\n      fetchUserData(roomname);\n      setTimeout(function () {\n        listData = convertChat();\n        setTimeout(function () {\n          getListData(listData);\n          console.log(messageList);\n          console.log('Update Chat');\n        }, 500);\n      }, 500);\n    }, 3000);\n    return () => clearInterval(interval);\n  }, []); // submit message button\n\n  const handleButton = () => {\n    chatPost(message, sessionStorage.getItem('roomname')); // after posting message, emptys message-input\n\n    setTimeout(function () {\n      setMessage('');\n    }, 500);\n  };\n\n  const convertChat = () => {\n    var check = false;\n    var temp = [{\n      author: 'user',\n      text: 'item.text',\n      time: 'item.time'\n    }];\n    chatData.forEach(item => {\n      //cheks if user is in room, if nut user.name= undefined\n      const user = userData.find(person => {\n        return person.id == item.userId;\n      });\n      console.log(user); // as a standart\n\n      var username = \"deleted User\"; // if user is in userlist / in room\n\n      if (user != undefined) {\n        username = user.name;\n      } // cleanes up the initial array + assings the first slot/ the scond if the first is a real message\n\n\n      if (temp.length == 1) {\n        if (temp[0].time == 'item.time') {\n          temp[0] = {\n            author: username,\n            text: item.text,\n            time: item.time\n          };\n        } else {\n          temp[1] = {\n            author: username,\n            text: item.text,\n            time: item.time\n          };\n        } //other cheks wont trigger for this.item if this is true\n\n\n        check = true;\n      } // prosseses the other objects in chatData \n\n\n      if (temp.length > 1 && check == false) {\n        temp[temp.length] = {\n          author: username,\n          text: item.text,\n          time: item.time\n        };\n      }\n\n      check = false;\n    });\n    console.log(temp);\n  }; //____________________________\n\n\n  const fetchChatData = roomname => {\n    fetch('https://gruppe13.toni-barth.com/rooms/' + roomname + '/chat', {\n      method: 'GET'\n    }).then(res => res.json()).then(response => {\n      getChatData(response.messages);\n    });\n  };\n\n  const fetchUserData = roomname => {\n    fetch('https://gruppe13.toni-barth.com/rooms/' + roomname + '/users').then(res => res.json()).then(response => {\n      getUserData(response.users);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ChatBox\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messageBox\",\n      children: messageList.map(line => /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"massage\",\n        children: line.userId + ': ' + line.text\n      }, line.time, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 30\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatSubmitbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        class: \"submit\",\n        placeholder: \"Narricht schreiben\",\n        value: message,\n        onChange: change => setMessage(change.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: event => handleButton(),\n        className: \"message_submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"nNkk1FHBUYwz0tSvrDzx52CUNLo=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","chatPost","Chat","messageList","getListData","message","setMessage","chatData","getChatData","userData","getUserData","roomname","sessionStorage","getItem","listData","interval","setInterval","fetchChatData","fetchUserData","setTimeout","convertChat","console","log","clearInterval","handleButton","check","temp","author","text","time","forEach","item","user","find","person","id","userId","username","undefined","name","length","fetch","method","then","res","json","response","messages","users","map","line","change","target","value","event"],"sources":["D:/wum/w2g2022-web/src/components/Chat.js"],"sourcesContent":["/**\r\n *  Chat window\r\n *  TODO manages Chat\r\n *  TODO uses get and posts\r\n *  TODO exports it selfe, needs css style\r\n *  TODO writing message and submit it\r\n * \r\n */\r\n\r\nimport React, { useEffect, useState } from 'react'\r\nimport {  chatPost } from './Controller/ChatController'\r\nimport \"./css/Chat.css\";\r\n\r\n\r\nconst Chat = () => {\r\n    const [messageList, getListData]= useState([])\r\n    const [message, setMessage] = useState('')\r\n    const [chatData, getChatData]= useState([])\r\n    const [userData, getUserData] = useState([])\r\n    const roomname = sessionStorage.getItem('roomname')\r\n    \r\n    var listData = []\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            fetchChatData(roomname)\r\n            fetchUserData(roomname)\r\n            \r\n            setTimeout(function () {\r\n                    listData = convertChat()\r\n                setTimeout(function () {\r\n                    getListData(listData)\r\n                    console.log(messageList)\r\n            console.log('Update Chat')\r\n                }, 500)\r\n            }, 500)\r\n\r\n\r\n\r\n\r\n\t\t}, 3000);\r\n\t\treturn () => clearInterval(interval);\r\n\t}, []);\r\n\r\n    // submit message button\r\n    const handleButton = ()=>{\r\n        chatPost(message, sessionStorage.getItem('roomname'))\r\n        // after posting message, emptys message-input\r\n        setTimeout(function () {\r\n            setMessage('')\r\n        }, 500)\r\n    }\r\n\r\n\r\n    const convertChat=()=>{\r\n        \r\n        var check = false\r\n        var temp = [{author: 'user', text:'item.text', time: 'item.time'}]\r\n\r\n        chatData.forEach((item)=>{\r\n            \r\n            //cheks if user is in room, if nut user.name= undefined\r\n            const user = userData.find((person=>{\r\n                return person.id == item.userId}))\r\n            console.log(user)\r\n            // as a standart\r\n            var username=\"deleted User\"\r\n\r\n            // if user is in userlist / in room\r\n            if(user!=undefined)\r\n            {\r\n                username= user.name\r\n            }\r\n\r\n            // cleanes up the initial array + assings the first slot/ the scond if the first is a real message\r\n            if(temp.length==1){\r\n                if(temp[0].time=='item.time'){\r\n                    temp[0]= {author: username, text: item.text, time: item.time}\r\n                    \r\n                }\r\n                else{\r\n                    temp[1]= {author: username, text: item.text, time: item.time}\r\n                    \r\n                }\r\n                //other cheks wont trigger for this.item if this is true\r\n                check= true\r\n            }\r\n            // prosseses the other objects in chatData \r\n            if(temp.length>1 && check==false)\r\n            {\r\n                temp[temp.length]= {author: username, text: item.text, time: item.time}\r\n            }\r\n\r\n            check=false\r\n\r\n        })\r\n        console.log(temp)\r\n    }\r\n    //____________________________\r\n\r\n    const fetchChatData = (roomname) => {\r\n        \r\n        fetch('https://gruppe13.toni-barth.com/rooms/'+roomname+'/chat', {\r\n            method:'GET'\r\n        }).then((res) =>\r\n        res.json()).then((response)=> {\r\n            getChatData(response.messages)\r\n        })\r\n        \r\n    }\r\n\r\n    const fetchUserData = (roomname) => {\r\n\t\tfetch('https://gruppe13.toni-barth.com/rooms/' + roomname + '/users')\r\n\t\t\t.then((res) =>\r\n\t\t\t\tres.json())\r\n\t\t\t.then((response) => {\r\n\t\t\t\tgetUserData(response.users);\r\n\t\t\t})\r\n\r\n\t}\r\n    \r\n  return (\r\n    <div className='ChatBox'>\r\n        <div className='messageBox'>\r\n\t\t\t{messageList.map( line => <ul className='massage' key={line.time}>{line.userId+': '+line.text}</ul>)}\r\n        </div>\r\n        <div className='ChatSubmitbar'>\r\n            <input type=\"text\"  class=\"submit\" placeholder=\"Narricht schreiben\" value={message} onChange={(change) => setMessage(change.target.value)}></input>\r\n            <button onClick={event => handleButton()} className=\"message_submit\">Send</button>\r\n       \r\n        </div>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default Chat"],"mappings":"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"},"metadata":{},"sourceType":"module"}